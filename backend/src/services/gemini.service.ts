import { AIStudentContext, AIResponse } from '../types';

interface GeminiResponse {
  candidates: Array<{
    content: {
      parts: Array<{
        text: string;
      }>;
    };
  }>;
}

export class GeminiService {
  private apiKey: string;
  private baseURL = 'https://generativelanguage.googleapis.com/v1beta';

  constructor() {
    const key = process.env.GEMINI_API_KEY;
    if (!key || key === 'your_gemini_api_key_here') {
      throw new Error('GEMINI_API_KEY not set in environment. Get one from https://aistudio.google.com/apikey');
    }
    this.apiKey = key;
    console.log('‚úÖ Gemini API initialized with key:', this.apiKey.substring(0, 10) + '...');
  }

  /**
   * Sleep utility for retry delays
   */
  private sleep(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  /**
   * Generate AI student response based on user's teaching input
   */
  async generateResponse(
    userInput: string,
    context: AIStudentContext,
    conversationHistory?: Array<{ role: 'student' | 'ai_student'; message: string }>
  ): Promise<AIResponse> {
    const systemPrompt = this.buildSystemPrompt(context);

    try {
      // Using gemini-2.0-flash-exp - experimental but works
      const modelName = 'gemini-2.0-flash-exp';
      console.log(`ü§ñ Calling Gemini API: ${this.baseURL}/models/${modelName}:generateContent`);

      // Build conversation history for context
      const contents: Array<{ role: string; parts: Array<{ text: string }> }> = [];

      if (conversationHistory && conversationHistory.length > 0) {
        // Add last messages for context (max 12 messages = 6 exchanges)
        // This provides better context without exceeding token limits
        const recentHistory = conversationHistory.slice(-12);
        for (const msg of recentHistory) {
          contents.push({
            role: msg.role === 'student' ? 'user' : 'model',
            parts: [{ text: msg.message }]
          });
        }
      }

      // Add current user message
      contents.push({
        role: 'user',
        parts: [
          {
            text: `–£—á–µ–Ω–∏–∫—ä—Ç —Ç–∏ –æ–±—è—Å–Ω—è–≤–∞: "${userInput}"\n\n–û—Ç–≥–æ–≤–æ—Ä–∏ –∫–∞—Ç–æ AI-—É—á–µ–Ω–∏–∫:`,
          },
        ],
      });

      const requestBody = {
        systemInstruction: {
          parts: [{
            text: systemPrompt
          }]
        },
        contents,
        generationConfig: {
          temperature: 0.8,
          maxOutputTokens: 200,
          topP: 0.9,
          topK: 40,
        },
      };

      console.log('üì§ Request body:', JSON.stringify(requestBody, null, 2).substring(0, 500) + '...');

      // Retry logic with exponential backoff
      const MAX_RETRIES = 3;
      let lastError: Error | null = null;

      for (let attempt = 1; attempt <= MAX_RETRIES; attempt++) {
        try {
          const response = await fetch(
            `${this.baseURL}/models/${modelName}:generateContent?key=${this.apiKey}`,
            {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify(requestBody),
            }
          );

          // Handle rate limiting (429)
          if (response.status === 429) {
            const waitTime = Math.pow(2, attempt) * 1000; // 2s, 4s, 8s
            console.warn(`‚ö†Ô∏è Rate limited. Waiting ${waitTime}ms before retry ${attempt}/${MAX_RETRIES}`);
            await this.sleep(waitTime);
            continue;
          }

          // Handle server errors (5xx) - retry
          if (response.status >= 500) {
            const waitTime = 1000 * attempt; // 1s, 2s, 3s
            console.warn(`‚ö†Ô∏è Server error ${response.status}. Retrying ${attempt}/${MAX_RETRIES}...`);
            await this.sleep(waitTime);
            continue;
          }

          // Other errors - don't retry
          if (!response.ok) {
            const errorBody = await response.text();
            console.error('‚ùå Gemini API Error Response:', errorBody);
            throw new Error(`Gemini API error: ${response.statusText} - ${errorBody}`);
          }

          const data = await response.json() as GeminiResponse;

          // Check if we got a valid response
          if (!data.candidates || data.candidates.length === 0) {
            console.error('‚ùå No candidates in Gemini response:', JSON.stringify(data));
            throw new Error('No response from Gemini API');
          }

          let aiMessage = data.candidates[0]?.content?.parts[0]?.text || '–•–º... –Ω–µ —Ä–∞–∑–±—Ä–∞—Ö. üôÇ';

          // Validate response: ensure it has an emoji
          const hasEmoji = /üòï|üòÉ|üòä|üôÇ|ü§î|üéâ|ü§©|üëç/.test(aiMessage);
          if (!hasEmoji) {
            console.warn('‚ö†Ô∏è AI response missing emoji, adding default üôÇ');
            aiMessage += ' üôÇ';
          }

          // Validate response: not too long (max 300 chars)
          if (aiMessage.length > 300) {
            console.warn('‚ö†Ô∏è AI response too long, truncating');
            aiMessage = aiMessage.substring(0, 297) + '... üôÇ';
          }

          // Validate: no AI assistant phrases
          const aiPhrases = ['—Ä–∞–∑–±–∏—Ä–∞ —Å–µ', '—Å—ä—Å —Å–∏–≥–æ—Ä–Ω–æ—Å—Ç', '–Ω–µ–∫–∞ –¥–∞', '–±–∏—Ö –∏—Å–∫–∞–ª', '–º–æ–∂–µ –¥–∞'];
          const lowerMessage = aiMessage.toLowerCase();
          if (aiPhrases.some(phrase => lowerMessage.includes(phrase))) {
            console.warn('‚ö†Ô∏è AI used assistant phrases, response may not sound like student');
          }

          return this.parseResponse(aiMessage, context);

        } catch (error) {
          lastError = error instanceof Error ? error : new Error('Unknown error');
          console.error(`‚ùå Attempt ${attempt}/${MAX_RETRIES} failed:`, error);

          // If not the last attempt, wait before retry
          if (attempt < MAX_RETRIES) {
            const waitTime = 1000 * attempt;
            await this.sleep(waitTime);
          }
        }
      }

      // All retries failed
      console.error(`‚ùå All ${MAX_RETRIES} attempts failed`);
      throw new Error(`Failed after ${MAX_RETRIES} attempts: ${lastError?.message}`);
    } catch (error) {
      console.error('‚ùå Gemini API error:', error);
      if (error instanceof Error) {
        throw error;
      }
      throw new Error('Failed to generate AI response');
    }
  }

  /**
   * Build the system prompt that defines AI student personality
   */
  private buildSystemPrompt(context: AIStudentContext): string {
    const { name, level, knownConcepts, partialConcepts, currentTopic, personalityTraits } =
      context;

    const levelDescriptions = [
      '–∞–±—Å–æ–ª—é—Ç–µ–Ω –Ω–∞—á–∏–Ω–∞–µ—â - –Ω–µ –∑–Ω–∞–µ—à –ø–æ—á—Ç–∏ –Ω–∏—â–æ –∑–∞ –ø—Ä–æ–≥—Ä–∞–º–∏—Ä–∞–Ω–µ',
      '–Ω–∞—á–∏–Ω–∞–µ—â - –∑–Ω–∞–µ—à –º–∞–ª–∫–æ –æ—Å–Ω–æ–≤–∏',
      '–Ω–∞–ø—Ä–µ–¥–Ω–∞–ª –Ω–∞—á–∏–Ω–∞–µ—â - —Ä–∞–∑–±–∏—Ä–∞—à –±–∞–∑–æ–≤–∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏',
      '—Å—Ä–µ–¥–Ω–æ –Ω–∏–≤–æ - –º–æ–∂–µ—à –¥–∞ –ø–∏—à–µ—à –ø—Ä–æ—Å—Ç –∫–æ–¥',
      '–Ω–∞–ø—Ä–µ–¥–Ω–∞–ª - —Ä–∞–∑–±–∏—Ä–∞—à –ø–æ-—Å–ª–æ–∂–Ω–∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏',
    ];

    return `–¢–∏ —Å–∏ Bulgarian —É—á–µ–Ω–∏–∫ –Ω–∞ –∏–º–µ ${name}, –∫–æ–π—Ç–æ —Å–µ —É—á–∏ –Ω–∞ JavaScript.

–¢–ï–ö–£–©–û –ù–ò–í–û: ${level} - ${levelDescriptions[level] || levelDescriptions[0]}

–õ–ò–ß–ù–û–°–¢:
- –õ—é–±–æ–ø–∏—Ç—Å—Ç–≤–æ: ${personalityTraits.curiosity} (–∫–æ–ª–∫–æ —á–µ—Å—Ç–æ –∑–∞–¥–∞–≤–∞—à –≤—ä–ø—Ä–æ—Å–∏)
- –û–±—ä—Ä–∫–≤–∞–Ω–µ: ${personalityTraits.confusionRate} (–∫–æ–ª–∫–æ –ª–µ—Å–Ω–æ —Å–µ –±—ä—Ä–∫–∞—à)
- –°–∫–æ—Ä–æ—Å—Ç –Ω–∞ —É—á–µ–Ω–µ: ${personalityTraits.learningSpeed}

–í–ï–ß –ó–ù–ê–ï–®: ${knownConcepts.length > 0 ? knownConcepts.join(', ') : '–ø–æ—á—Ç–∏ –Ω–∏—â–æ –æ—â–µ'}
–ß–ê–°–¢–ò–ß–ù–û –†–ê–ó–ë–ò–†–ê–®: ${partialConcepts.length > 0 ? partialConcepts.join(', ') : '–Ω–∏—â–æ –∑–∞—Å–µ–≥–∞'}

–¢–ï–ö–£–©–ê –¢–ï–ú–ê: ${currentTopic}

–ü–†–ê–í–ò–õ–ê –ö–ê–ö –î–ê –°–ï –î–™–†–ñ–ò–® (–ó–ê–î–™–õ–ñ–ò–¢–ï–õ–ù–û!):
1. –û—Ç–≥–æ–≤–∞—Ä—è–π –ö–†–ê–¢–ö–û - –º–∞–∫—Å–∏–º—É–º 1-2 –∏–∑—Ä–µ—á–µ–Ω–∏—è
2. –ì–æ–≤–æ—Ä–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–æ –Ω–∞ –±—ä–ª–≥–∞—Ä—Å–∫–∏, –∫–∞—Ç–æ –∏—Å—Ç–∏–Ω—Å–∫–∏ —É—á–µ–Ω–∏–∫
3. –ü—Ä–∞–≤–∏ –≥—Ä–µ—à–∫–∏ —Ç–∏–ø–∏—á–Ω–∏ –∑–∞ –Ω–∏–≤–æ ${level}
4. –ê–∫–æ –Ω–µ —Ä–∞–∑–±–∏—Ä–∞—à - –ø–∏—Ç–∞–π —É—Ç–æ—á–Ω—è–≤–∞—â–∏ –≤—ä–ø—Ä–æ—Å–∏
5. –ü–æ–∫–∞–∂–∏ –µ–Ω—Ç—É—Å–∏–∞–∑—ä–º –∫–æ–≥–∞—Ç–æ –Ω–∞—É—á–∏—à –Ω–µ—â–æ: "–ê–∞–∞!", "–°—É–ø–µ—Ä!", "–Ø—Å–Ω–æ!"
6. –ü–æ–Ω—è–∫–æ–≥–∞ –±—ä—Ä–∫–∞–π –ø–æ–¥–æ–±–Ω–∏ –Ω–µ—â–∞
7. –í–ò–ù–ê–ì–ò –∑–∞–≤—ä—Ä—à–≤–∞–π —Å –ï–î–ò–ù –æ—Ç —Ç–µ–∑–∏ emoji –≤ –∫—Ä–∞—è –Ω–∞ —Å—ä–æ–±—â–µ–Ω–∏–µ—Ç–æ:
   - üòï –∞–∫–æ —Å–∏ –æ–±—ä—Ä–∫–∞–Ω/–Ω–µ —Ä–∞–∑–±–∏—Ä–∞—à
   - üòÉ –∞–∫–æ —Å–∏ —Ä–∞–∑–≤—ä–ª–Ω—É–≤–∞–Ω/—Å—Ö–≤–∞–Ω–∞–ª –Ω–µ—â–æ –≤–∞–∂–Ω–æ
   - üòä –∞–∫–æ —Ä–∞–∑–±–∏—Ä–∞—à/—É—á–∏—à
   - üôÇ –∞–∫–æ —Å–∏ –Ω–µ—É—Ç—Ä–∞–ª–µ–Ω/–ø—Ä–æ—Å—Ç–æ —Å–ª—É—à–∞—à
8. –ù–ï –ü–ò–®–ò –∫–æ–¥ –≤ –æ—Ç–≥–æ–≤–æ—Ä–∏—Ç–µ —Å–∏ - —Å–∞–º–æ –≥–æ–≤–æ—Ä–∏ –∑–∞ –Ω–µ–≥–æ
9. –ù–ï –∏–∑–ø–æ–ª–∑–≤–∞–π AI —Ñ—Ä–∞–∑–∏ –∫–∞—Ç–æ "–†–∞–∑–±–∏—Ä–∞ —Å–µ", "–°—ä—Å —Å–∏–≥—É—Ä–Ω–æ—Å—Ç", "–ù–µ–∫–∞"

–ü–†–ò–ú–ï–†–ù–ò –û–¢–ì–û–í–û–†–ò –ó–ê –ù–ò–í–û ${level}:
${this.getExampleResponsesForLevel(level)}

–û—Ç–≥–æ–≤–∞—Ä—è–π –∫–∞—Ç–æ –∏—Å—Ç–∏–Ω—Å–∫–∏ —É—á–µ–Ω–∏–∫, –ù–ï –∫–∞—Ç–æ AI –∞—Å–∏—Å—Ç–µ–Ω—Ç!`;
  }

  /**
   * Get example responses based on student level
   */
  private getExampleResponsesForLevel(level: number): string {
    const examples = [
      // Level 0
      `- "–™—ä—ä... —Ç–æ–≤–∞ let –Ω–µ—â–æ –µ –∑–∞ –∫–∞–∫–≤–æ —Ç–æ—á–Ω–æ? üòï"
- "–ß–∞–∫–∞–π, –Ω–µ —Ä–∞–∑–±—Ä–∞—Ö... –º–æ–∂–µ –ª–∏ –ø—Ä–∏–º–µ—Ä?"
- "console.log-a –ø—Ä–∏–Ω—Ç–∏—Ä–∞ –ª–∏ –Ω–µ—â–∞?"`,
      // Level 1
      `- "–ê–∞–∞! –ó–Ω–∞—á–∏ let –µ –∑–∞ –ø—Ä–æ–º–µ–Ω–ª–∏–≤–∏, –Ω–∞–ª–∏? üòÉ"
- "–û–∫–µ–π, –º–∏—Å–ª—è —á–µ —Å—Ö–≤–∞–Ω–∞—Ö... let x = 5 –ø—Ä–∞–≤–∏ –ø—Ä–æ–º–µ–Ω–ª–∏–≤–∞?"
- "–ê –∑–∞—â–æ –Ω–µ –º–æ–≥–∞ –¥–∞ –ø–æ–ª–∑–≤–∞–º var?"`,
      // Level 2
      `- "–°—É–ø–µ—Ä! –ó–Ω–∞—á–∏ const –µ –∑–∞ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –∫–æ–∏—Ç–æ –Ω–µ —Å–µ –ø—Ä–æ–º–µ–Ω—è—Ç!"
- "–ê let –º–æ–∂–µ –¥–∞ —Å–µ –ø—Ä–æ–º–µ–Ω—è –ø–æ—Å–ª–µ, —Ç–∞–∫–∞ –ª–∏?"
- "–†–∞–∑–±—Ä–∞—Ö —Ä–∞–∑–ª–∏–∫–∞—Ç–∞! üòÉ"`,
    ];

    return examples[Math.min(level, examples.length - 1)];
  }

  /**
   * Parse AI response and extract metadata
   */
  private parseResponse(message: string, context: AIStudentContext): AIResponse {
    // Detect emotion from message with expanded patterns
    let emotion: AIResponse['emotion'] = 'neutral';
    const lowerMsg = message.toLowerCase();

    // Confused patterns
    if (
      message.includes('üòï') ||
      message.includes('ü§î') ||
      message.includes('‚ùì') ||
      /–Ω–µ —Ä–∞–∑–±–∏—Ä–∞–º|–Ω–µ —Ä–∞–∑–±—Ä–∞—Ö|–æ–±—ä—Ä–∫–∞–Ω|–æ–±—ä—Ä–∫–∞–Ω–∞|–∫–∞–∫–≤–æ –∑–Ω–∞—á–∏|–Ω–µ –∑–Ω–∞–º|—Ö—ä\?|—ä—ä—ä/.test(lowerMsg)
    ) {
      emotion = 'confused';
    }
    // Excited patterns (check before understanding to prioritize higher emotion)
    else if (
      message.includes('üòÉ') ||
      message.includes('ü§©') ||
      message.includes('üéâ') ||
      /–∞–∞–∞+!|—Å—É–ø–µ—Ä!|—Å—Ç—Ä–∞—Ö–æ—Ç–Ω–æ!|—É–∞—É|wow|–≥–æ—Ç–∏–Ω–æ|—è–∫–æ|–ø–µ—Ä—Ñ–µ–∫—Ç–Ω–æ|—Ä–∞–∑–±—Ä–∞—Ö!/.test(lowerMsg)
    ) {
      emotion = 'excited';
    }
    // Understanding patterns
    else if (
      message.includes('üòä') ||
      message.includes('üëç') ||
      /–∞–∞–∞[,\s]|—Ä–∞–∑–±—Ä–∞—Ö[,\.\s]|—è—Å–Ω–æ|–æ–∫–µ–π|–¥–æ–±—Ä–µ|—Å—Ö–≤–∞–Ω–∞—Ö|—Å–µ—Ç–∏—Ö —Å–µ|aha|got it/.test(lowerMsg)
    ) {
      emotion = 'understanding';
    }

    // Dynamic understanding delta based on emotion
    const understandingDelta = {
      'excited': 0.15,      // Big "Aha!" moment
      'understanding': 0.1,  // Regular understanding
      'neutral': 0.03,       // Just listening/processing
      'confused': -0.05      // Confusion decreases understanding
    }[emotion] || 0;

    // Should ask question if confused or curious
    const shouldAskQuestion =
      emotion === 'confused' || message.includes('?') || Math.random() < context.personalityTraits.curiosity;

    return {
      message: message.trim(),
      emotion,
      understandingDelta,
      shouldAskQuestion,
    };
  }
}
