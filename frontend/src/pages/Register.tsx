import { useState } from 'react';
import { Link } from 'react-router-dom';
import { useAuthStore } from '../stores/authStore';

function Register() {
  const { register, isLoading, error, clearError } = useAuthStore();

  const [email, setEmail] = useState('');
  const [name, setName] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [localError, setLocalError] = useState('');
  const [registrationSuccess, setRegistrationSuccess] = useState(false);
  const [registeredEmail, setRegisteredEmail] = useState('');

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLocalError('');
    clearError();

    if (!email || !name || !password || !confirmPassword) {
      setLocalError('–ú–æ–ª—è –ø–æ–ø—ä–ª–Ω–∏ –≤—Å–∏—á–∫–∏ –ø–æ–ª–µ—Ç–∞');
      return;
    }

    if (password.length < 6) {
      setLocalError('–ü–∞—Ä–æ–ª–∞—Ç–∞ —Ç—Ä—è–±–≤–∞ –¥–∞ –µ –Ω–∞–π-–º–∞–ª–∫–æ 6 —Å–∏–º–≤–æ–ª–∞');
      return;
    }

    if (password !== confirmPassword) {
      setLocalError('–ü–∞—Ä–æ–ª–∏—Ç–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–≤–∞—Ç');
      return;
    }

    try {
      await register(email, name, password);
      setRegisteredEmail(email);
      setRegistrationSuccess(true);
    } catch (err) {
      setLocalError(error || '–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è');
    }
  };

  // Success screen - email verification pending
  if (registrationSuccess) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4">
        <div className="w-full max-w-md bg-white rounded-2xl shadow-xl p-8">
          <div className="text-center">
            <div className="mb-4">
              <svg
                className="mx-auto h-16 w-16 text-blue-600"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"
                />
              </svg>
            </div>
            <h1 className="text-3xl font-bold text-gray-900 mb-2">–ü–æ—Ç–≤—ä—Ä–¥–∏ –∏–º–µ–π–ª–∞ —Å–∏</h1>
            <p className="text-gray-600 mb-4">
              –†–∞–∑–ø—Ä–∞—â–∞—Ö–º–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–µ–Ω –ª–∏–Ω–∫ –Ω–∞:
            </p>
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
              <p className="text-blue-900 font-semibold break-all">{registeredEmail}</p>
            </div>
            <div className="space-y-4 text-left mb-6">
              <p className="text-gray-700">
                ‚úì –û—Ç–≤–æ—Ä–∏ —Ç–≤–æ—è –∏–º–µ–π–ª –∞–¥—Ä–µ—Å
              </p>
              <p className="text-gray-700">
                ‚úì –ù–∞–º–µ—Ä–∏ –∏–º–µ–π–ª–∞ –æ—Ç LearnMate
              </p>
              <p className="text-gray-700">
                ‚úì –ö–ª–∏–∫–Ω–∏ –Ω–∞ –ª–∏–Ω–∫–∞ "–ü–æ—Ç–≤—ä—Ä–¥–∏ –∏–º–µ–π–ª –∞–¥—Ä–µ—Å"
              </p>
              <p className="text-gray-700">
                ‚úì –°–ª–µ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è—Ç–∞ –º–æ–∂–µ—à –¥–∞ —Å–µ –ª–æ–≥–Ω–µ—à
              </p>
            </div>
            <p className="text-sm text-gray-600 mb-6">
              –ò–º–µ–π–ª—ä—Ç –Ω–µ –µ –ø—Ä–∏—Å—Ç–∏–≥–Ω–∞–ª? –ü—Ä–æ–≤–µ—Ä–∏ spam –ø–∞–ø–∫–∞—Ç–∞ –∏–ª–∏ –ø–æ–º–æ–ª–∏ –∑–∞ –Ω–æ–≤ –ª–∏–Ω–∫ –ø—Ä–∏ –ª–æ–≥–∏–Ω.
            </p>
            <Link
              to="/login"
              className="inline-block w-full px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg transition duration-200 text-center"
            >
              –ö—ä–º –ª–æ–≥–∏–Ω
            </Link>
          </div>
        </div>
      </div>
    );
  }

  // Registration form
  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4">
      <div className="w-full max-w-md bg-white rounded-2xl shadow-xl p-8">
        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold text-gray-900 mb-2">üéì –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</h1>
          <p className="text-gray-600">–°—ä–∑–¥–∞–π –Ω–æ–≤ –∞–∫–∞—É–Ω—Ç</p>
        </div>

        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              –ò–º–µ
            </label>
            <input
              type="text"
              value={name}
              onChange={(e) => setName(e.target.value)}
              disabled={isLoading}
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent disabled:bg-gray-100"
              placeholder="–¢–≤–æ–µ –∏–º–µ"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              –ò–º–µ–π–ª
            </label>
            <input
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              disabled={isLoading}
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent disabled:bg-gray-100"
              placeholder="—Ç–≤–æ–π@–∏–º–µ–π–ª.com"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              –ü–∞—Ä–æ–ª–∞
            </label>
            <div className="relative">
              <input
                type={showPassword ? 'text' : 'password'}
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                disabled={isLoading}
                className="w-full px-4 py-2 pr-10 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent disabled:bg-gray-100"
                placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
              />
              <button
                type="button"
                onClick={() => setShowPassword(!showPassword)}
                className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-600 hover:text-gray-900"
                title={showPassword ? '–°–∫—Ä–∏–π –ø–∞—Ä–æ–ª–∞—Ç–∞' : '–ü–æ–∫–∞–∂–∏ –ø–∞—Ä–æ–ª–∞—Ç–∞'}
              >
                {showPassword ? (
                  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-4.803m5.596-3.856a3.375 3.375 0 11-6.75 0 3.375 3.375 0 016.75 0z" />
                  </svg>
                ) : (
                  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                  </svg>
                )}
              </button>
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              –ü–æ—Ç–≤—ä—Ä–¥–∏ –ø–∞—Ä–æ–ª–∞
            </label>
            <div className="relative">
              <input
                type={showConfirmPassword ? 'text' : 'password'}
                value={confirmPassword}
                onChange={(e) => setConfirmPassword(e.target.value)}
                disabled={isLoading}
                className="w-full px-4 py-2 pr-10 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent disabled:bg-gray-100"
                placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
              />
              <button
                type="button"
                onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-600 hover:text-gray-900"
                title={showConfirmPassword ? '–°–∫—Ä–∏–π –ø–∞—Ä–æ–ª–∞—Ç–∞' : '–ü–æ–∫–∞–∂–∏ –ø–∞—Ä–æ–ª–∞—Ç–∞'}
              >
                {showConfirmPassword ? (
                  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-4.803m5.596-3.856a3.375 3.375 0 11-6.75 0 3.375 3.375 0 016.75 0z" />
                  </svg>
                ) : (
                  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                  </svg>
                )}
              </button>
            </div>
          </div>

          {(localError || error) && (
            <div className="p-3 bg-red-100 text-red-700 rounded-lg text-sm">
              ‚ùå {localError || error}
            </div>
          )}

          <button
            type="submit"
            disabled={isLoading}
            className="w-full bg-blue-600 hover:bg-blue-700 disabled:bg-gray-400 text-white font-semibold py-3 px-6 rounded-lg transition duration-200 flex items-center justify-center"
          >
            {isLoading ? (
              <>
                <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                –†–µ–≥–∏—Å—Ç—Ä–∏—Ä–∞–º...
              </>
            ) : (
              'üöÄ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä–∞–π —Å–µ'
            )}
          </button>
        </form>

        <div className="mt-6 pt-6 border-t border-gray-200 text-center">
          <p className="text-gray-600 text-sm">
            –ò–º–∞—à –∞–∫–∞—É–Ω—Ç?{' '}
            <Link to="/login" className="text-blue-600 hover:text-blue-800 font-medium">
              –í–ª–µ–∑ —Ç—É–∫
            </Link>
          </p>
        </div>
      </div>
    </div>
  );
}

export default Register;
